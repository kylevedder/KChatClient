/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tcpchatclient;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import javax.swing.JScrollBar;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author Kyle
 */
public class ChatUI extends javax.swing.JFrame
{

    JScrollBar scrollBar;
    boolean connected = false;

    /**
     * Creates new form ChatUI
     */
    public ChatUI()
    {
        initComponents();
        textInput.addKeyListener(new KeyListener()
        {

            @Override
            public void keyTyped(KeyEvent e)
            {

            }

            @Override
            public void keyPressed(KeyEvent e)
            {

            }

            @Override
            public void keyReleased(KeyEvent e)
            {

                if (KeyEvent.VK_ENTER == e.getKeyCode())
                {
                    Main.addStringToSubmit(textInput.getText());
                    textInput.setText("");
                }
            }

        });
        this.addWindowListener(new WindowListener()
        {

            @Override
            public void windowOpened(WindowEvent e)
            {
//                
            }

            @Override
            public void windowClosing(WindowEvent e)
            {
                if (Main.DEBUG)
                {
                    System.out.println("closing");
                    Main.killConnection();
                    System.out.println("connection killed");
                }
            }

            @Override
            public void windowClosed(WindowEvent e)
            {

            }

            @Override
            public void windowIconified(WindowEvent e)
            {

            }

            @Override
            public void windowDeiconified(WindowEvent e)
            {

            }

            @Override
            public void windowActivated(WindowEvent e)
            {

            }

            @Override
            public void windowDeactivated(WindowEvent e)
            {

            }
        });

        this.setLocationRelativeTo(null);
        DefaultCaret caret = (DefaultCaret) textArea.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
//        scrollBar = jScrollPane1.getVerticalScrollBar();
//        scrollBar.setValue(scrollBar.getMaximum());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        textInput = new javax.swing.JTextField();
        textInputIP = new javax.swing.JTextField();
        buttonConnect = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        labelPort = new javax.swing.JLabel();
        textFieldPort = new javax.swing.JTextField();
        labelNickname = new javax.swing.JLabel();
        textFieldName = new javax.swing.JTextField();
        speakCheck = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("K Chat");
        setResizable(false);

        textArea.setEditable(false);
        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        textInput.setEnabled(false);

        textInputIP.setText("192.168.1.36");
        textInputIP.setToolTipText("Local Area Network IP address");

        buttonConnect.setText("Connect");
        buttonConnect.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                buttonConnectMouseClicked(evt);
            }
        });

        jLabel1.setText("Server IP:");

        labelPort.setText("Port:");

        textFieldPort.setText("6789");
        textFieldPort.setToolTipText("This port must be above 2000");
        textFieldPort.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                textFieldPortActionPerformed(evt);
            }
        });

        labelNickname.setText("Set Name:");

        textFieldName.setText("Guest");

        speakCheck.setText("Speak Chats");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(textInput, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(labelNickname))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(textFieldName)
                            .addComponent(textInputIP, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelPort)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(speakCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonConnect, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textInputIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonConnect)
                    .addComponent(jLabel1)
                    .addComponent(labelPort)
                    .addComponent(textFieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNickname)
                    .addComponent(textFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(speakCheck))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonConnectMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_buttonConnectMouseClicked
    {//GEN-HEADEREND:event_buttonConnectMouseClicked
        if(Main.DEBUG)System.out.println(connected);
        connected = !connected;
        buttonConnect.setText((connected) ? "Disconnect" : "Connect");
        if (connected)
        {

            Main.startConnection(textInputIP.getText(), Integer.parseInt(textFieldPort.getText()), textFieldName.getText(), speakCheck.isSelected());
        }
        else
        {
            Main.killConnection();
        }
        lockInput(connected);

    }//GEN-LAST:event_buttonConnectMouseClicked

    /**
     * Locks input components
     *
     * @param lock true locks components, false unlocks
     */
    private synchronized void lockInput(boolean lock)
    {
        textInput.setEnabled(lock);
        textInputIP.setEnabled(!lock);
        textFieldPort.setEnabled(!lock);
        textFieldName.setEnabled(!lock);
        speakCheck.setEnabled(!lock);
    }

    public synchronized void resetUI()
    {
        lockInput(false);
        connected = false;
        buttonConnect.setText("Connect");
    }

    private void textFieldPortActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_textFieldPortActionPerformed
    {//GEN-HEADEREND:event_textFieldPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldPortActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(ChatUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(ChatUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(ChatUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(ChatUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new ChatUI().setVisible(true);
            }
        });
    }

    public synchronized void addText(String s)
    {
        if (!textArea.getText().equals(""))
        {
            textArea.setText(textArea.getText() + '\n' + s);
        }
        else
        {
            textArea.setText(s);
        }
//        scrollBar.setValue(scrollBar.getMaximum());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonConnect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelNickname;
    private javax.swing.JLabel labelPort;
    private javax.swing.JCheckBox speakCheck;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextField textFieldName;
    private javax.swing.JTextField textFieldPort;
    private javax.swing.JTextField textInput;
    private javax.swing.JTextField textInputIP;
    // End of variables declaration//GEN-END:variables
}
